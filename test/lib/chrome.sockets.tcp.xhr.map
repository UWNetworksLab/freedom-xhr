{"version":3,"file":"chrome.sockets.tcp.xhr.js","sources":["../../src/chrome.sockets.polyfill.js","../../src/chrome.sockets.tcp.xhr.js"],"names":["chrome","socket","prototype","polyfill","tcp","create","type","options","callback","connect","socketId","peerAddress","peerPort","onReceive","addListener","send","data","write","disconnect","close","destroy","undefined","sockets","ChromeSocketsXMLHttpRequest","xhr","Object","defineProperties","this","enumerable","writable","value","uri","events","method","createInfo","inprogress","redirects","max","current","last","timer","id","expired","headers","Connection","Accept-Encoding","Content-Length","response","headersText","props","configurable","readyState","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","timeout","withCredentials","upload","status","statusText","responseType","responseText","responseXML","onreadystatechange","ontimeout","onabort","onerror","onload","onloadstart","onloadend","onprogress","beforeredirect","get","set","dispatchEvent","regex","RegExp","open","url","exec","TypeError","setRequestHeader","header","length","indexOf","toUpperCase","encoding","mimetype","ArrayBufferView","Blob","HTMLElement","FormData","socketProperties","persistent","name","onCreate","bind","setTimeout","expireTimer","abort","getResponseHeader","getAllResponseHeaders","overrideMimeType","addEventListener","push","Array","removeEventListener","i","splice","args","arguments","hasOwnProperty","apply","slice","call","forEach","event","port","parseInt","onConnect","result","error","resultCode","generateMessage","toArrayBuffer","buffer","onSend","sendInfo","onReceiveError","info","toString","parseResponse","responseMatch","match","index","headerLines","split","statusLine","shift","statusLineMatch","headerLine","headerLineMatch","replace","processResponse","redirectUrl","join","errorCodes",1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,300,301,302,310,311,312,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,501,502,503,800,801,802,803,804,805,806,"Math","abs","message","setMaxRedirects","ArrayBuffer","blob","reader","FileReader","e","target","readAsText","String","readAsArrayBuffer"],"mappings":"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","sourcesContent":["(function () {\n    'use strict';\n\n    chrome.socket.prototype.polyfill = {\n        tcp: {\n            create: function(type, options, callback) {\n                return chrome.socket.create('tcp', options, callback);\n            },\n\n            connect: function (socketId, peerAddress, peerPort, callback) {\n                return chrome.socket.connect(socketId, peerAddress, peerPort, callback);\n            },\n\n            onReceive: {\n                addListener: function () {\n                }\n            },\n\n            send: function (socketId, data, callback) {\n                return chrome.socket.write(socketId, data, callback);\n            },\n\n            disconnect: function (socketId) {\n                return chrome.socket.disconnect(socketId);\n            },\n\n            close: function (socketId) {\n                return chrome.socket.destroy(socketId);\n            }\n        }\n    };\n\n    if (chrome.sockets === undefined) {\n        chrome.prototype.sockets = chrome.socket.polyfill;\n    }\n})();\n","(function () {\n    'use strict';\n\n    var ChromeSocketsXMLHttpRequest = chrome.sockets.tcp.xhr = function () {\n        Object.defineProperties(this, {\n            options: {\n                enumerable: false,\n                writable: true,\n                value: {\n                    uri: null,\n                    data: null,\n                    events: {},\n                    method: null,\n                    createInfo: null,\n                    inprogress: false,\n                    redirects: {\n                        max: 10,\n                        current: 0,\n                        last: null\n                    },\n                    timer: {\n                        id: null,\n                        expired: false\n                    },\n                    headers: {\n                        'Connection': 'close',\n                        'Accept-Encoding': 'identity',\n                        'Content-Length': 0\n                    },\n                    response: {\n                        headers: [],\n                        headersText: null\n                    }\n                }\n            },\n\n            props: {\n                enumerable: false,\n                configurable: false,\n                value: {\n                    readyState: 0,\n                }\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-unsent\n             */\n            UNSENT: {\n                enumerable: false,\n                writable: true,\n                value: 0\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-opened\n             */\n            OPENED: {\n                enumerable: false,\n                writable: true,\n                value: 1\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-headers_received\n             * TODO: time in milliseconds.\n             */\n            HEADERS_RECEIVED: {\n                enumerable: false,\n                writable: true,\n                value: 2\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-loading\n             * TODO: time in milliseconds.\n             */\n            LOADING: {\n                enumerable: false,\n                writable: true,\n                value: 3\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-done\n             */\n            DONE: {\n                enumerable: false,\n                writable: true,\n                value: 4\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\n             * TODO: time in milliseconds.\n             */\n            timeout: {\n                enumerable: true,\n                writable: true,\n                value: 0\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute\n             */\n            withCredentials: {\n                enumerable: true,\n                writable: true,\n                value: false\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-upload-attribute\n             */\n            upload: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-status-attribute\n             */\n            status: {\n                enumerable: true,\n                writable: true,\n                value: 0\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-statustext-attribute\n             */\n            statusText: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n             */\n            responseType: {\n                enumerable: true,\n                writable: true,\n                value: 'text'\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n             */\n            response: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n             */\n            responseText: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#the-responsexml-attribute\n             */\n            responseXML: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * http://www.w3.org/TR/XMLHttpRequest/#event-handlers\n             */\n            onreadystatechange: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            ontimeout: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onabort: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onerror: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onload: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onloadstart: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onloadend: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            onprogress: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            /**\n             * custom event to match `chrome.webRequest.onBeforeRedirect`\n             * http://developer.chrome.com/extensions/webRequest#event-onBeforeRedirect\n             */\n            beforeredirect: {\n                enumerable: true,\n                writable: true,\n                value: null\n            },\n\n            readyState: {\n                enumerable: true,\n\n                get: function () {\n                    return this.props.readyState;\n                },\n\n                set: function (value) {\n                    this.props.readyState = value;\n\n                    this.dispatchEvent('readystatechange');\n                }\n            }\n        });\n    };\n\n    /**\n     * Regular Expression for URL validation\n     * Modified: added capturing groups\n     *\n     * Author: Diego Perini\n     * Updated: 2010/12/05\n     * License: MIT\n     *\n     * Copyright (c) 2010-2013 Diego Perini (http://www.iport.it)\n     *\n     * https://gist.github.com/dperini/729294\n     */\n    ChromeSocketsXMLHttpRequest.prototype.regex = new RegExp(\n        '^' +\n            // protocol identifier\n            '(?:(https?|ftp)://)' +\n            // user:pass authentication\n            '(?:\\\\S+(?::\\\\S*)?@)?' +\n            '(' +\n                // IP address exclusion\n                // private & local networks\n                '(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})' +\n                '(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})' +\n                '(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})' +\n                // IP address dotted notation octets\n                // excludes loopback network 0.0.0.0\n                // excludes reserved space >= 224.0.0.0\n                // excludes network & broacast addresses\n                // (first & last IP address of each class)\n                '(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' +\n                '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' +\n                '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' +\n            '|' +\n                // host name\n                '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\n                // domain name\n                '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\n                // TLD identifier\n                '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' +\n            ')' +\n            // port number\n            '(?::(\\\\d{2,5}))?' +\n            // resource path\n            '(/[^\\\\s]*)?' +\n        '$', 'i'\n    );\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-open()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.open = function (method, url) {\n        this.options.method = method;\n        this.options.uri = this.regex.exec(url);\n\n        // check if the method is valid\n        if (!this.options.method) {\n            throw new TypeError('method is not a valid HTTP method');\n        }\n\n        // check if the URI parsed properly\n        if (this.options.uri === null) {\n            throw new TypeError('url cannot be parsed');\n        }\n\n        // set readyState to OPENED\n        this.readyState = this.OPENED;\n\n        this.setRequestHeader('Host', this.options.uri[2]);\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.setRequestHeader = function (header, value) {\n        if (this.readyState !== this.OPENED || this.options.inprogress === true) {\n            throw new TypeError('InvalidStateError');\n        }\n\n        if (!header) {\n            throw new TypeError('header is not a valid HTTP header field name');\n        }\n\n        if (!value && value.length !== 0) {\n            throw new TypeError('value is not a valid HTTP header field value.');\n        }\n\n        // TODO: If header is in the headers list, append \",\", followed by U+0020, followed by value.\n        this.options.headers[header] = value;\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-send()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.send = function (data) {\n        // If the state is not OPENED, throw an \"InvalidStateError\" exception.\n        // If the send() flag is set, throw an \"InvalidStateError\" exception.\n        if (this.readyState !== this.OPENED || this.options.inprogress === true) {\n            throw new TypeError('InvalidStateError');\n        }\n\n        // If the request method is GET or HEAD, set data to null\n        if (['GET', 'HEADER'].indexOf(this.options.method.toUpperCase()) !== -1) {\n            data = null;\n        }\n\n        // If data is null, do not include a request entity body and go to the next step.\n        if (data !== null) {\n            var encoding = null;\n            var mimetype = null;\n\n\n            if (data instanceof ArrayBufferView) {\n                // Let the request entity body be the raw data represented by data.\n            } else if (data instanceof Blob) {\n                // if the object's type attribute is not the empty string let mime type be its value.\n\n                // Let the request entity body be the raw data represented by data.\n            } else if (data instanceof HTMLElement) {\n                // Let encoding be \"UTF-8\".\n                encoding = 'UTF-8';\n\n                // If data is an HTML document, let mime type be \"text/html\"\n                // or let mime type be \"application/xml\" otherwise.\n                mimetype = 'text/html';\n\n                // Then append \";charset=UTF-8\" to mime type.\n                mimetype += ';charset=UTF-8';\n\n                //Let the request entity body be data, serialized, converted to Unicode, and utf-8 encoded. Re-throw any exception serializing throws.\n            } else if (data instanceof FormData) {\n                // Let the request entity body be the result of running the multipart/form-data encoding algorithm with data as form data set and with utf-8 as the explicit character encoding.\n\n                //Let mime type be the concatenation of \"multipart/form-data;\", a U+0020 SPACE character, \"boundary=\", and the multipart/form-data boundary string generated by the multipart/form-data encoding algorithm.\n            } else if (typeof(data) === 'string') {\n                // Let encoding be \"UTF-8\".\n                encoding = 'UTF-8';\n\n                // Let mime type be \"text/plain;charset=UTF-8\".\n                mimetype = 'text/plain;charset=UTF-8';\n\n                // Let the request entity body be data, utf-8 encoded.\n            }\n\n            this.options.data = data;\n        }\n\n        // If a Content-Type header is in author request headers and its value is a valid MIME type that has a charset parameter whose value is not a case-insensitive match for encoding, and encoding is not null, set all the charset parameters of that Content-Type header to encoding.\n\n        // If no Content-Type header is in author request headers and mime type is not null, append a Content-Type header with value mime type to author request headers.\n\n        // Unset the error flag, upload complete flag and upload events flag.\n\n        // If there is no request entity body or if it is empty, set the upload complete flag.\n\n        // Set the send() flag.\n        this.options.inprogress = true;\n\n        // Fire a progress event named loadstart.\n        this.dispatchEvent('loadstart');\n\n        // continue with sockets setup\n        var socketProperties = {\n            persistent: false,\n            name: 'chrome.sockets.tcp.xhr'\n        };\n\n        chrome.sockets.tcp.create(socketProperties, this.onCreate.bind(this));\n\n        if (this.timeout > 0) {\n            this.options.timer.id = setTimeout(this.expireTimer.bind(this), this.timeout);\n        }\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.abort = function () {\n        this.disconnect();\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.getResponseHeader = function (header) {\n        return this.options.response.headers[header];\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.getAllResponseHeaders = function () {\n        return this.options.response.headersText;\n    };\n\n    /**\n     * http://www.w3.org/TR/XMLHttpRequest/#the-overridemimetype()-method\n     */\n    ChromeSocketsXMLHttpRequest.prototype.overrideMimeType = function (mimetype) {\n    };\n\n    /**\n     * event managers\n     */\n    ChromeSocketsXMLHttpRequest.prototype.addEventListener = function (name, callback) {\n        if (this.options.events[name]) {\n            this.options.events[name].push(callback);\n        } else {\n            this.options.events[name] = new Array(callback);\n        }\n\n        return this;\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.removeEventListener = function(name, callback) {\n        if (this.options.events[name]) {\n            var i = this.options.events[name].indexOf(callback);\n            if (i > -1) {\n                this.options.events[name].splice(i, 1);\n            } else {\n                return false;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.dispatchEvent = function(name) {\n        var args = arguments;\n\n        if (this.hasOwnProperty('on' + name)) {\n            if (this['on' + name]) {\n                this['on' + name].apply(this, Array.prototype.slice.call(args, 1));\n            }\n        }\n\n        if (!this.options.events[name]) {\n            return false;\n        }\n\n        this.options.events[name].forEach(function (event) {\n            event.apply(this, Array.prototype.slice.call(args, 1));\n        }.bind(this));\n    };\n\n    /**\n     * chrome.sockets.tcp events\n     */\n    ChromeSocketsXMLHttpRequest.prototype.onCreate = function (createInfo) {\n        if (!this.options.inprogress) {\n            return;\n        }\n\n        var port = this.options.uri[3] ? parseInt(this.options.uri[3], null) : 80;\n\n        this.options.createInfo = createInfo;\n\n        chrome.sockets.tcp.connect(createInfo.socketId, this.options.uri[2], port, this.onConnect.bind(this));\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.onConnect = function (result) {\n        if (!this.options.inprogress) {\n            return;\n        }\n\n        if (this.options.timer.expired) {\n            return;\n        } else if (result < 0) {\n            this.error({\n                error: 'connect error',\n                resultCode: result\n            });\n        } else {\n            // assign recieve listner\n            chrome.sockets.tcp.onReceive.addListener(this.onReceive.bind(this));\n\n            // send message as ArrayBuffer\n            this.generateMessage().toArrayBuffer(function sendMessage (buffer) {\n                chrome.sockets.tcp.send(this.options.createInfo.socketId, buffer, this.onSend.bind(this));\n            }.bind(this));\n        }\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.onSend = function (sendInfo) {\n        if (sendInfo.resultCode < 0) {\n            this.error({\n                error: 'send error',\n                resultCode: sendInfo.resultCode\n            });\n\n            this.disconnect();\n        }\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.onReceiveError = function (info) {\n        this.error({\n            error: 'receive error',\n            resultCode: info.resultCode\n        });\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.onReceive = function (info) {\n        // chrome.sockets.tcp.onReceiveError.addListener(this.onReceiveError.bind(this));\n\n        if (!this.options.inprogress) {\n            return;\n        }\n\n        if (info.socketId !== this.options.createInfo.socketId) {\n            return;\n        }\n\n        // immediatly disconnect on first respond\n        this.disconnect();\n\n        info.data.toString(this.parseResponse.bind(this));\n    };\n\n    /**\n     * internal methods\n     */\n    ChromeSocketsXMLHttpRequest.prototype.parseResponse = function (response) {\n        // detect CRLFx2 position\n        var responseMatch = response.match(/\\r\\n\\r\\n/);\n\n        // something went wrong\n        if (responseMatch === null) {\n            this.error({\n                error: 'could not parse response'\n            });\n\n            return;\n        }\n\n        // slice the headers up to CRLFx2\n        this.options.response.headersText = response.slice(0, responseMatch.index);\n\n        // slice the body right after CRLFx2 and set the response object\n        this.responseText = response.slice(responseMatch.index + 4);\n\n        // parse headers\n        var headerLines = this.options.response.headersText.split('\\r\\n');\n        var statusLine = headerLines.shift();\n\n        var statusLineMatch = statusLine.match(/(HTTP\\/\\d\\.\\d)\\s+((\\d+)\\s+.*)/);\n\n        if (statusLineMatch) {\n            this.status = parseInt(statusLineMatch[3], 0);\n            this.statusText = statusLineMatch[2];\n        }\n\n        headerLines.forEach(function (headerLine) {\n            // detect CRLFx2 position\n            var headerLineMatch = headerLine.match(/:/);\n\n            // sanity check\n            if (headerLineMatch) {\n                // slice the header line at the colon and trim output\n                var header = headerLine.slice(0, headerLineMatch.index).replace(/^\\s+/g, '').replace(/\\s+$/g, '');\n                var value = headerLine.slice(headerLineMatch.index + 1).replace(/^\\s+/g, '').replace(/\\s+$/g, '');\n\n                this.options.response.headers[header] = value;\n            }\n        }.bind(this));\n\n        this.processResponse();\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.processResponse = function () {\n\n        // If the response has an HTTP status code of 301, 302, 303, 307, or 308\n        // TODO: implement infinite loop precautions\n        if ([301, 302, 303, 307, 308].indexOf(this.status) !== -1) {\n            // stop\n            this.disconnect();\n\n            // set the new destination\n            var redirectUrl = this.getResponseHeader('Location');\n\n            // notify\n            this.dispatchEvent('beforeredirect', redirectUrl, this.options.response.headers, this.statusText);\n\n            // enforece the redirect limit\n            if (this.options.redirects.current === this.options.redirects.max) {\n                this.error({\n                    error: 'max redirects',\n                    resultCode: 310\n                });\n\n                return;\n            }\n\n            // detect a loop\n            if (this.options.redirects.last === redirectUrl) {\n                this.error({\n                    error: 'redirect loop'\n                });\n\n                return;\n            } else {\n                this.options.redirects.last = redirectUrl;\n            }\n\n            // count\n            this.options.redirects.current++;\n\n            // start a new call\n            this.open(this.options.method, redirectUrl);\n            this.send(this.options.data);\n\n            return;\n        }\n\n        // set readyState to HEADERS_RECEIVED\n        this.readyState = this.HEADERS_RECEIVED;\n        // set readyState to LOADING\n        this.readyState = this.LOADING;\n\n        // TODO: set the response entity body according to responseType, as an ArrayBuffer, Blob, Document, JavaScript object (for \"json\"), or string.\n        this.response = this.responseText;\n\n        // set readyState to DONE\n        this.readyState = this.DONE;\n\n        // Fire a progress event named \"progress\".\n        this.dispatchEvent('progress');\n\n        // Fire a progress event named load.\n        this.dispatchEvent('load');\n\n        // Fire a progress event named loadend\n        this.dispatchEvent('loadend');\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.generateMessage = function () {\n        var headers = [];\n\n        // add missing parts to header\n        headers.push(this.options.method + ' ' + this.options.uri[4] + ' HTTP/1.1');\n\n        for (var name in this.options.headers) {\n            headers.push(name + ': ' + this.options.headers[name]);\n        }\n\n        return headers.join('\\r\\n') + '\\r\\n\\r\\n' + this.options.data;\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.error = function (error) {\n        // list of network errors as defined in chromium source:\n        // https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h&sq=package:chromium\n        //\n        // Ranges:\n        //     0- 99 System related errors\n        //   100-199 Connection related errors\n        //   200-299 Certificate errors\n        //   300-399 HTTP errors\n        //   800-899 DNS resolver errors\n\n        var errorCodes = {\n            1: 'An asynchronous IO operation is not yet complete.',\n            2: 'A generic failure occurred.',\n            3: 'An operation was aborted (due to user action)',\n            4: 'An argument to the function is incorrect.',\n            5: 'The handle or file descriptor is invalid',\n            6: 'The file or directory cannot be found',\n            7: 'An operation timed out',\n            8: 'The file is too large',\n            9: 'An unexpected error.  This may be caused by a programming mistake or an invalid assumption',\n            10: 'Permission to access a resource, other than the network, was denied',\n            11: 'The operation failed because of unimplemented functionality',\n            12: 'There were not enough resources to complete the operation',\n            13: 'Memory allocation failed',\n            14: 'The file upload failed because the file\\'s modification time was different from the expectation',\n            15: 'The socket is not connected',\n            16: 'The file already exists',\n            17: 'The path or file name is too long',\n            18: 'Not enough room left on the disk',\n            19: 'The file has a virus',\n            20: 'The client chose to block the request',\n            21: 'The network changed',\n            22: 'The request was blocked by the URL blacklist configured by the domain administrator',\n            23: 'The socket is already connected',\n            100: 'A connection was closed (corresponding to a TCP FIN)',\n            101: 'A connection was reset (corresponding to a TCP RST)',\n            102: 'A connection attempt was refused',\n            103: 'A connection timed out as a result of not receiving an ACK for data sent. This can include a FIN packet that did not get ACK\\'d',\n            104: 'A connection attempt failed',\n            105: 'The host name could not be resolved',\n            106: 'The Internet connection has been lost',\n            107: 'An SSL protocol error occurred',\n            108: 'The IP address or port number is invalid (e.g., cannot connect to the IP address 0 or the port 0)',\n            109: 'The IP address is unreachable.  This usually means that there is no route to the specified host or network',\n            110: 'The server requested a client certificate for SSL client authentication',\n            111: 'A tunnel connection through the proxy could not be established',\n            112: 'No SSL protocol versions are enabled',\n            113: 'The client and server don\\'t support a common SSL protocol version or cipher suite',\n            114: 'The server requested a renegotiation (rehandshake)',\n            115: 'The proxy requested authentication (for tunnel establishment) with an unsupported method',\n            116: 'During SSL renegotiation (rehandshake), the server sent a certificate with an error',\n            117: 'The SSL handshake failed because of a bad or missing client certificate',\n            118: 'A connection attempt timed out',\n            119: 'There are too many pending DNS resolves, so a request in the queue was aborted',\n            120: 'Failed establishing a connection to the SOCKS proxy server for a target host',\n            121: 'The SOCKS proxy server failed establishing connection to the target host because that host is unreachable',\n            122: 'The request to negotiate an alternate protocol failed',\n            123: 'The peer sent an SSL no_renegotiation alert message',\n            124: 'Winsock sometimes reports more data written than passed.  This is probably due to a broken LSP',\n            125: 'An SSL peer sent us a fatal decompression_failure alert.',\n            126: 'An SSL peer sent us a fatal bad_record_mac alert',\n            127: 'The proxy requested authentication (for tunnel establishment)',\n            128: 'A known TLS strict server didn\\'t offer the renegotiation extension',\n            129: 'The SSL server attempted to use a weak ephemeral Diffie-Hellman key',\n            130: 'Could not create a connection to the proxy server.',\n            131: 'A mandatory proxy configuration could not be used.',\n            133: 'We\\'ve hit the max socket limit for the socket pool while preconnecting.',\n            134: 'The permission to use the SSL client certificate\\'s private key was denied',\n            135: 'The SSL client certificate has no private key',\n            136: 'The certificate presented by the HTTPS Proxy was invalid',\n            137: 'An error occurred when trying to do a name resolution (DNS)',\n            138: 'Permission to access the network was denied.',\n            139: 'The request throttler module cancelled this request to avoid DDOS',\n            140: 'A request to create an SSL tunnel connection through the HTTPS proxy received a non-200 (OK) and non-407 (Proxy Auth) response.',\n            141: 'We were unable to sign the CertificateVerify data of an SSL client auth handshake with the client certificate\\'s private key',\n            142: 'The message was too large for the transport',\n            143: 'A SPDY session already exists, and should be used instead of this connection',\n            145: 'Websocket protocol error.',\n            146: 'Connection was aborted for switching to another ptotocol.',\n            147: 'Returned when attempting to bind an address that is already in use',\n            148: 'An operation failed because the SSL handshake has not completed',\n            149: 'SSL peer\\'s public key is invalid',\n            150: 'The certificate didn\\'t match the built-in public key pins for the host name',\n            151: 'Server request for client certificate did not contain any types we support',\n            152: 'Server requested one type of cert, then requested a different type while the first was still being generated',\n            153: 'An SSL peer sent us a fatal decrypt_error alert. ',\n            154: 'There are too many pending WebSocketJob instances, so the new job was not pushed to the queue',\n            155: 'There are too many active SocketStream instances, so the new connect request was rejected',\n            156: 'The SSL server certificate changed in a renegotiation',\n            157: 'The SSL server indicated that an unnecessary TLS version fallback was performed',\n            158: 'Certificate Transparency: All Signed Certificate Timestamps failed to verify',\n            159: 'The SSL server sent us a fatal unrecognized_name alert',\n            300: 'The URL is invalid',\n            301: 'The scheme of the URL is disallowed',\n            302: 'The scheme of the URL is unknown',\n            310: 'Attempting to load an URL resulted in too many redirects',\n            311: 'Attempting to load an URL resulted in an unsafe redirect (e.g., a redirect to file: is considered unsafe)',\n            312: 'Attempting to load an URL with an unsafe port number.',\n            320: 'The server\\'s response was invalid',\n            321: 'Error in chunked transfer encoding',\n            322: 'The server did not support the request method',\n            323: 'The response was 407 (Proxy Authentication Required), yet we did not send the request to a proxy',\n            324: 'The server closed the connection without sending any data',\n            325: 'The headers section of the response is too large',\n            326: 'The PAC requested by HTTP did not have a valid status code (non-200)',\n            327: 'The evaluation of the PAC script failed',\n            328: 'The response was 416 (Requested range not satisfiable) and the server cannot satisfy the range requested',\n            329: 'The identity used for authentication is invalid',\n            330: 'Content decoding of the response body failed',\n            331: 'An operation could not be completed because all network IO is suspended',\n            332: 'FLIP data received without receiving a SYN_REPLY on the stream',\n            333: 'Converting the response to target encoding failed',\n            334: 'The server sent an FTP directory listing in a format we do not understand',\n            335: 'Attempted use of an unknown SPDY stream id',\n            336: 'There are no supported proxies in the provided list',\n            337: 'There is a SPDY protocol error',\n            338: 'Credentials could not be established during HTTP Authentication',\n            339: 'An HTTP Authentication scheme was tried which is not supported on this machine',\n            340: 'Detecting the encoding of the response failed',\n            341: '(GSSAPI) No Kerberos credentials were available during HTTP Authentication',\n            342: 'An unexpected, but documented, SSPI or GSSAPI status code was returned',\n            343: 'The environment was not set up correctly for authentication',\n            344: 'An undocumented SSPI or GSSAPI status code was returned',\n            345: 'The HTTP response was too big to drain',\n            346: 'The HTTP response contained multiple distinct Content-Length headers',\n            347: 'SPDY Headers have been received, but not all of them - status or version headers are missing, so we\\'re expecting additional frames to complete them',\n            348: 'No PAC URL configuration could be retrieved from DHCP.',\n            349: 'The HTTP response contained multiple Content-Disposition headers',\n            350: 'The HTTP response contained multiple Location headers',\n            351: 'SPDY server refused the stream. Client should retry. This should never be a user-visible error',\n            352: 'SPDY server didn\\'t respond to the PING message',\n            353: 'The request couldn\\'t be completed on an HTTP pipeline. Client should retry',\n            354: 'The HTTP response body transferred fewer bytes than were advertised by the Content-Length header when the connection is closed',\n            355: 'The HTTP response body is transferred with Chunked-Encoding, but the terminating zero-length chunk was never sent when the connection is closed',\n            356: 'There is a QUIC protocol error',\n            357: 'The HTTP headers were truncated by an EOF',\n            358: 'The QUIC crytpo handshake failed.',\n            359: 'An https resource was requested over an insecure QUIC connection',\n            501: 'The server\\'s response was insecure (e.g. there was a cert error)',\n            502: 'The server responded to a <keygen> with a generated client cert that we don\\'t have the matching private key for',\n            503: 'An error adding to the OS certificate database (e.g. OS X Keychain)',\n            800: 'DNS resolver received a malformed response',\n            801: 'DNS server requires TCP',\n            802: 'DNS server failed.',\n            803: 'DNS transaction timed out',\n            804: 'The entry was not found in cache, for cache-only lookups',\n            805: 'Suffix search list rules prevent resolution of the given host name',\n            806: 'Failed to sort addresses according to RFC3484'\n        };\n\n        if (this.options.inprogress) {\n            this.disconnect();\n        }\n\n        if (error.resultCode) {\n            error.resultCode = Math.abs(error.resultCode);\n            error.message = errorCodes[Math.abs(error.resultCode)];\n        }\n\n        this.dispatchEvent('error', error);\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.disconnect = function () {\n        this.options.inprogress = false;\n\n        if (this.options.createInfo !== null) {\n            chrome.sockets.tcp.disconnect(this.options.createInfo.socketId);\n            chrome.sockets.tcp.close(this.options.createInfo.socketId);\n            this.options.createInfo = null;\n        }\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.expireTimer = function () {\n        if (this.readyState === this.OPENED) {\n            this.disconnect();\n            this.options.timer.expired = true;\n            this.error({\n                error: 'timed out'\n            });\n\n            this.dispatchEvent('timeout');\n        }\n    };\n\n    ChromeSocketsXMLHttpRequest.prototype.setMaxRedirects = function (max) {\n        this.options.redirects.max = max;\n    };\n\n    /**\n     * internal methods\n     * TODO: consider removing from global objects\n     */\n    ArrayBuffer.prototype.toString = function (callback) {\n        var blob = new Blob([this]);\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            callback(e.target.result);\n        };\n\n        reader.readAsText(blob);\n    };\n\n    String.prototype.toArrayBuffer = function (callback) {\n        var blob = new Blob([this]);\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            callback(e.target.result);\n        };\n\n        reader.readAsArrayBuffer(blob);\n    };\n})();\n"]}